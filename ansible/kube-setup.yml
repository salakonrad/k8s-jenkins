---
- hosts: all
  become: true
  gather_facts: True
  tasks:
    - name: Add kubernetes repo
      yum_repository:
        name: kubernetes
        description: k8s Repo
        baseurl: https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
        gpgkey: https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
        state: present

    - name: Installing Docker
      shell: |
        yum install -y yum-utils device-mapper-persistent-data lvm2
        yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
        yum install -y docker-ce docker-ce-cli containerd.io

    - name: Add vagrant user to docker group
      user:
        name: vagrant
        group: docker

    - name: Install packages
      yum:
        name:
          - kubeadm
        state: present

    - name: Load necesarry modules
      shell: modprobe br_netfilter

    #  - name: Hosts file
    #    blockinfile:
    #      path: /etc/hosts
    #      block: |
    #        "{{ hostvars[item]['ansible_eth1']['ipv4']['address'] }} {{ hostvars[item]['ansible_hostname'] }}"
    #    with_items:
    #      - node1
    #      - node2
    #      - node3

    - name: hosts file
      blockinfile:
        path: /etc/hosts
        block: |
          {{ node1ip }} {{ node1name }}
          {{ node2ip }} {{ node2name }}
          {{ node3ip }} {{ node3name }}

    - name: Disable swap for k8s
      mount:
        name: swap
        state: absent

    - name: Disable swap
      replace:
        path: /etc/fstab
        regexp: '^/swapfile'
        replace: '#/swapfile'

    - name: Turn off swap
      shell: swapoff -a

    - name: Routing traffic fix
      blockinfile:
        path: /etc/sysctl.conf
        block: |
          net.bridge.bridge-nf-call-ip6tables = 1
          net.bridge.bridge-nf-call-iptables = 1

    - name: Load sysctl changes
      shell: sysctl -p

    - name: Disable selinux for k8s to access filesystem
      shell: "setenforce 0 && sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config"

    - name: Create direcotry Docker
      file:
        path: /etc/docker
        state: directory
        mode: '0755'
        recurse: yes

    - name: Create docker daemon json cofnig
      file:
        path: /etc/docker/daemon.json
        state: touch
        mode: '0644'

    - name: Change cgroupdriver in docker config
      blockinfile:
        path: /etc/docker/daemon.json
        marker: ""
        block: |
          {
            "exec-opts": ["native.cgroupdriver=systemd"],
            "log-driver": "json-file",
            "log-opts": {
              "max-size": "100m"
            },
            "storage-driver": "overlay2"
          }

    - name: Start and enable services
      systemd:
        name: "{{item}}"
        state: started
        daemon_reload: yes
        enabled: yes
      with_items:
        - docker
        - kubelet

    - name: Part to setup on master node
      block:
        - name: Init k8s cluster
          shell: kubeadm init --apiserver-advertise-address="192.168.56.10" --apiserver-cert-extra-sans="192.168.56.10"  --node-name node1 --pod-network-cidr=192.168.0.0/16

        - name: Setup kubeconfig for vagrant user
          command: "{{ item }}"
          with_items:
            - mkdir -p /home/vagrant/.kube
            - cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config
            - chown vagrant:vagrant /home/vagrant/.kube/config

        - name: Install flannel pod network
          become: false
          command: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml

        - name: Generate join command
          command: kubeadm token create --print-join-command
          register: join_command

        - name: Copy join command to local file
          local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command"
          become: false
      when: mode == "master"

    - name: Copy the join command to server location
      copy: src=join-command dest=/tmp/join-command.sh mode=0777
      when: mode == "worker"

    - name: Join the node to cluster
      command: sh /tmp/join-command.sh
      when: mode == "worker"
